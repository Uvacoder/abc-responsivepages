/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ResizeEvent } from "./components/resize-able/resize-able";
import { ScreenSize } from "./components/ScreenSize";
export namespace Components {
    interface AppRoot {
    }
    interface BrowserFrame {
        "backUrl"?: string;
        "browserTitle"?: string;
        "forwardUrl"?: string;
    }
    interface ClickOutside {
    }
    interface DemoViewer {
        "pattern"?: string;
    }
    interface HomePage {
    }
    interface IconDesktop {
    }
    interface IconLaptop {
    }
    interface IconLayout {
    }
    interface IconList {
    }
    interface IconMobile {
    }
    interface IconNext {
    }
    interface IconPrevious {
    }
    interface IconRotate {
    }
    interface IconScreens {
    }
    interface IconTablet {
    }
    interface PatternList {
    }
    interface PatternPage {
        "pattern"?: string;
    }
    interface ResizeAble {
    }
    interface ScreenList {
    }
    interface ToolTip {
        "position": string;
        "tip"?: string;
    }
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLBrowserFrameElement extends Components.BrowserFrame, HTMLStencilElement {
    }
    var HTMLBrowserFrameElement: {
        prototype: HTMLBrowserFrameElement;
        new (): HTMLBrowserFrameElement;
    };
    interface HTMLClickOutsideElement extends Components.ClickOutside, HTMLStencilElement {
    }
    var HTMLClickOutsideElement: {
        prototype: HTMLClickOutsideElement;
        new (): HTMLClickOutsideElement;
    };
    interface HTMLDemoViewerElement extends Components.DemoViewer, HTMLStencilElement {
    }
    var HTMLDemoViewerElement: {
        prototype: HTMLDemoViewerElement;
        new (): HTMLDemoViewerElement;
    };
    interface HTMLHomePageElement extends Components.HomePage, HTMLStencilElement {
    }
    var HTMLHomePageElement: {
        prototype: HTMLHomePageElement;
        new (): HTMLHomePageElement;
    };
    interface HTMLIconDesktopElement extends Components.IconDesktop, HTMLStencilElement {
    }
    var HTMLIconDesktopElement: {
        prototype: HTMLIconDesktopElement;
        new (): HTMLIconDesktopElement;
    };
    interface HTMLIconLaptopElement extends Components.IconLaptop, HTMLStencilElement {
    }
    var HTMLIconLaptopElement: {
        prototype: HTMLIconLaptopElement;
        new (): HTMLIconLaptopElement;
    };
    interface HTMLIconLayoutElement extends Components.IconLayout, HTMLStencilElement {
    }
    var HTMLIconLayoutElement: {
        prototype: HTMLIconLayoutElement;
        new (): HTMLIconLayoutElement;
    };
    interface HTMLIconListElement extends Components.IconList, HTMLStencilElement {
    }
    var HTMLIconListElement: {
        prototype: HTMLIconListElement;
        new (): HTMLIconListElement;
    };
    interface HTMLIconMobileElement extends Components.IconMobile, HTMLStencilElement {
    }
    var HTMLIconMobileElement: {
        prototype: HTMLIconMobileElement;
        new (): HTMLIconMobileElement;
    };
    interface HTMLIconNextElement extends Components.IconNext, HTMLStencilElement {
    }
    var HTMLIconNextElement: {
        prototype: HTMLIconNextElement;
        new (): HTMLIconNextElement;
    };
    interface HTMLIconPreviousElement extends Components.IconPrevious, HTMLStencilElement {
    }
    var HTMLIconPreviousElement: {
        prototype: HTMLIconPreviousElement;
        new (): HTMLIconPreviousElement;
    };
    interface HTMLIconRotateElement extends Components.IconRotate, HTMLStencilElement {
    }
    var HTMLIconRotateElement: {
        prototype: HTMLIconRotateElement;
        new (): HTMLIconRotateElement;
    };
    interface HTMLIconScreensElement extends Components.IconScreens, HTMLStencilElement {
    }
    var HTMLIconScreensElement: {
        prototype: HTMLIconScreensElement;
        new (): HTMLIconScreensElement;
    };
    interface HTMLIconTabletElement extends Components.IconTablet, HTMLStencilElement {
    }
    var HTMLIconTabletElement: {
        prototype: HTMLIconTabletElement;
        new (): HTMLIconTabletElement;
    };
    interface HTMLPatternListElement extends Components.PatternList, HTMLStencilElement {
    }
    var HTMLPatternListElement: {
        prototype: HTMLPatternListElement;
        new (): HTMLPatternListElement;
    };
    interface HTMLPatternPageElement extends Components.PatternPage, HTMLStencilElement {
    }
    var HTMLPatternPageElement: {
        prototype: HTMLPatternPageElement;
        new (): HTMLPatternPageElement;
    };
    interface HTMLResizeAbleElement extends Components.ResizeAble, HTMLStencilElement {
    }
    var HTMLResizeAbleElement: {
        prototype: HTMLResizeAbleElement;
        new (): HTMLResizeAbleElement;
    };
    interface HTMLScreenListElement extends Components.ScreenList, HTMLStencilElement {
    }
    var HTMLScreenListElement: {
        prototype: HTMLScreenListElement;
        new (): HTMLScreenListElement;
    };
    interface HTMLToolTipElement extends Components.ToolTip, HTMLStencilElement {
    }
    var HTMLToolTipElement: {
        prototype: HTMLToolTipElement;
        new (): HTMLToolTipElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "browser-frame": HTMLBrowserFrameElement;
        "click-outside": HTMLClickOutsideElement;
        "demo-viewer": HTMLDemoViewerElement;
        "home-page": HTMLHomePageElement;
        "icon-desktop": HTMLIconDesktopElement;
        "icon-laptop": HTMLIconLaptopElement;
        "icon-layout": HTMLIconLayoutElement;
        "icon-list": HTMLIconListElement;
        "icon-mobile": HTMLIconMobileElement;
        "icon-next": HTMLIconNextElement;
        "icon-previous": HTMLIconPreviousElement;
        "icon-rotate": HTMLIconRotateElement;
        "icon-screens": HTMLIconScreensElement;
        "icon-tablet": HTMLIconTabletElement;
        "pattern-list": HTMLPatternListElement;
        "pattern-page": HTMLPatternPageElement;
        "resize-able": HTMLResizeAbleElement;
        "screen-list": HTMLScreenListElement;
        "tool-tip": HTMLToolTipElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface BrowserFrame {
        "backUrl"?: string;
        "browserTitle"?: string;
        "forwardUrl"?: string;
        "onRotateEvent"?: (event: CustomEvent<any>) => void;
    }
    interface ClickOutside {
        "onClickOutSide"?: (event: CustomEvent<any>) => void;
    }
    interface DemoViewer {
        "pattern"?: string;
    }
    interface HomePage {
    }
    interface IconDesktop {
    }
    interface IconLaptop {
    }
    interface IconLayout {
    }
    interface IconList {
    }
    interface IconMobile {
    }
    interface IconNext {
    }
    interface IconPrevious {
    }
    interface IconRotate {
    }
    interface IconScreens {
    }
    interface IconTablet {
    }
    interface PatternList {
    }
    interface PatternPage {
        "pattern"?: string;
    }
    interface ResizeAble {
        "onDidResizeEvent"?: (event: CustomEvent<ResizeEvent>) => void;
        "onResizeEvent"?: (event: CustomEvent<ResizeEvent>) => void;
    }
    interface ScreenList {
        "onChooseScreenSizeEvent"?: (event: CustomEvent<ScreenSize>) => void;
    }
    interface ToolTip {
        "position"?: string;
        "tip"?: string;
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "browser-frame": BrowserFrame;
        "click-outside": ClickOutside;
        "demo-viewer": DemoViewer;
        "home-page": HomePage;
        "icon-desktop": IconDesktop;
        "icon-laptop": IconLaptop;
        "icon-layout": IconLayout;
        "icon-list": IconList;
        "icon-mobile": IconMobile;
        "icon-next": IconNext;
        "icon-previous": IconPrevious;
        "icon-rotate": IconRotate;
        "icon-screens": IconScreens;
        "icon-tablet": IconTablet;
        "pattern-list": PatternList;
        "pattern-page": PatternPage;
        "resize-able": ResizeAble;
        "screen-list": ScreenList;
        "tool-tip": ToolTip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "browser-frame": LocalJSX.BrowserFrame & JSXBase.HTMLAttributes<HTMLBrowserFrameElement>;
            "click-outside": LocalJSX.ClickOutside & JSXBase.HTMLAttributes<HTMLClickOutsideElement>;
            "demo-viewer": LocalJSX.DemoViewer & JSXBase.HTMLAttributes<HTMLDemoViewerElement>;
            "home-page": LocalJSX.HomePage & JSXBase.HTMLAttributes<HTMLHomePageElement>;
            "icon-desktop": LocalJSX.IconDesktop & JSXBase.HTMLAttributes<HTMLIconDesktopElement>;
            "icon-laptop": LocalJSX.IconLaptop & JSXBase.HTMLAttributes<HTMLIconLaptopElement>;
            "icon-layout": LocalJSX.IconLayout & JSXBase.HTMLAttributes<HTMLIconLayoutElement>;
            "icon-list": LocalJSX.IconList & JSXBase.HTMLAttributes<HTMLIconListElement>;
            "icon-mobile": LocalJSX.IconMobile & JSXBase.HTMLAttributes<HTMLIconMobileElement>;
            "icon-next": LocalJSX.IconNext & JSXBase.HTMLAttributes<HTMLIconNextElement>;
            "icon-previous": LocalJSX.IconPrevious & JSXBase.HTMLAttributes<HTMLIconPreviousElement>;
            "icon-rotate": LocalJSX.IconRotate & JSXBase.HTMLAttributes<HTMLIconRotateElement>;
            "icon-screens": LocalJSX.IconScreens & JSXBase.HTMLAttributes<HTMLIconScreensElement>;
            "icon-tablet": LocalJSX.IconTablet & JSXBase.HTMLAttributes<HTMLIconTabletElement>;
            "pattern-list": LocalJSX.PatternList & JSXBase.HTMLAttributes<HTMLPatternListElement>;
            "pattern-page": LocalJSX.PatternPage & JSXBase.HTMLAttributes<HTMLPatternPageElement>;
            "resize-able": LocalJSX.ResizeAble & JSXBase.HTMLAttributes<HTMLResizeAbleElement>;
            "screen-list": LocalJSX.ScreenList & JSXBase.HTMLAttributes<HTMLScreenListElement>;
            "tool-tip": LocalJSX.ToolTip & JSXBase.HTMLAttributes<HTMLToolTipElement>;
        }
    }
}

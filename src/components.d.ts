/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ResizeEvent } from "./components/rp-resizable/rp-resizable";
import { ScreenSize } from "./components/ScreenSize";
export namespace Components {
    interface RpBrowserFrame {
        "backUrl"?: string;
        "browserTitle"?: string;
        "currentTab": number;
        "forwardUrl"?: string;
        "url"?: string;
    }
    interface RpClickOutside {
    }
    interface RpDemoViewer {
        "pattern"?: string;
    }
    interface RpHighlightCode {
        "source"?: string;
    }
    interface RpIconCode {
    }
    interface RpIconDesktop {
    }
    interface RpIconLaptop {
    }
    interface RpIconLayout {
    }
    interface RpIconList {
    }
    interface RpIconMobile {
    }
    interface RpIconNext {
    }
    interface RpIconPrevious {
    }
    interface RpIconRotate {
    }
    interface RpIconScreens {
    }
    interface RpIconTablet {
    }
    interface RpIndexPage {
    }
    interface RpPatternPage {
        "pattern"?: string;
    }
    interface RpPatternSource {
        "pattern"?: string;
    }
    interface RpPatterns {
    }
    interface RpResizable {
    }
    interface RpRoot {
    }
    interface RpScreens {
    }
    interface RpTooltip {
        "position": string;
        "tip"?: string;
    }
}
declare global {
    interface HTMLRpBrowserFrameElement extends Components.RpBrowserFrame, HTMLStencilElement {
    }
    var HTMLRpBrowserFrameElement: {
        prototype: HTMLRpBrowserFrameElement;
        new (): HTMLRpBrowserFrameElement;
    };
    interface HTMLRpClickOutsideElement extends Components.RpClickOutside, HTMLStencilElement {
    }
    var HTMLRpClickOutsideElement: {
        prototype: HTMLRpClickOutsideElement;
        new (): HTMLRpClickOutsideElement;
    };
    interface HTMLRpDemoViewerElement extends Components.RpDemoViewer, HTMLStencilElement {
    }
    var HTMLRpDemoViewerElement: {
        prototype: HTMLRpDemoViewerElement;
        new (): HTMLRpDemoViewerElement;
    };
    interface HTMLRpHighlightCodeElement extends Components.RpHighlightCode, HTMLStencilElement {
    }
    var HTMLRpHighlightCodeElement: {
        prototype: HTMLRpHighlightCodeElement;
        new (): HTMLRpHighlightCodeElement;
    };
    interface HTMLRpIconCodeElement extends Components.RpIconCode, HTMLStencilElement {
    }
    var HTMLRpIconCodeElement: {
        prototype: HTMLRpIconCodeElement;
        new (): HTMLRpIconCodeElement;
    };
    interface HTMLRpIconDesktopElement extends Components.RpIconDesktop, HTMLStencilElement {
    }
    var HTMLRpIconDesktopElement: {
        prototype: HTMLRpIconDesktopElement;
        new (): HTMLRpIconDesktopElement;
    };
    interface HTMLRpIconLaptopElement extends Components.RpIconLaptop, HTMLStencilElement {
    }
    var HTMLRpIconLaptopElement: {
        prototype: HTMLRpIconLaptopElement;
        new (): HTMLRpIconLaptopElement;
    };
    interface HTMLRpIconLayoutElement extends Components.RpIconLayout, HTMLStencilElement {
    }
    var HTMLRpIconLayoutElement: {
        prototype: HTMLRpIconLayoutElement;
        new (): HTMLRpIconLayoutElement;
    };
    interface HTMLRpIconListElement extends Components.RpIconList, HTMLStencilElement {
    }
    var HTMLRpIconListElement: {
        prototype: HTMLRpIconListElement;
        new (): HTMLRpIconListElement;
    };
    interface HTMLRpIconMobileElement extends Components.RpIconMobile, HTMLStencilElement {
    }
    var HTMLRpIconMobileElement: {
        prototype: HTMLRpIconMobileElement;
        new (): HTMLRpIconMobileElement;
    };
    interface HTMLRpIconNextElement extends Components.RpIconNext, HTMLStencilElement {
    }
    var HTMLRpIconNextElement: {
        prototype: HTMLRpIconNextElement;
        new (): HTMLRpIconNextElement;
    };
    interface HTMLRpIconPreviousElement extends Components.RpIconPrevious, HTMLStencilElement {
    }
    var HTMLRpIconPreviousElement: {
        prototype: HTMLRpIconPreviousElement;
        new (): HTMLRpIconPreviousElement;
    };
    interface HTMLRpIconRotateElement extends Components.RpIconRotate, HTMLStencilElement {
    }
    var HTMLRpIconRotateElement: {
        prototype: HTMLRpIconRotateElement;
        new (): HTMLRpIconRotateElement;
    };
    interface HTMLRpIconScreensElement extends Components.RpIconScreens, HTMLStencilElement {
    }
    var HTMLRpIconScreensElement: {
        prototype: HTMLRpIconScreensElement;
        new (): HTMLRpIconScreensElement;
    };
    interface HTMLRpIconTabletElement extends Components.RpIconTablet, HTMLStencilElement {
    }
    var HTMLRpIconTabletElement: {
        prototype: HTMLRpIconTabletElement;
        new (): HTMLRpIconTabletElement;
    };
    interface HTMLRpIndexPageElement extends Components.RpIndexPage, HTMLStencilElement {
    }
    var HTMLRpIndexPageElement: {
        prototype: HTMLRpIndexPageElement;
        new (): HTMLRpIndexPageElement;
    };
    interface HTMLRpPatternPageElement extends Components.RpPatternPage, HTMLStencilElement {
    }
    var HTMLRpPatternPageElement: {
        prototype: HTMLRpPatternPageElement;
        new (): HTMLRpPatternPageElement;
    };
    interface HTMLRpPatternSourceElement extends Components.RpPatternSource, HTMLStencilElement {
    }
    var HTMLRpPatternSourceElement: {
        prototype: HTMLRpPatternSourceElement;
        new (): HTMLRpPatternSourceElement;
    };
    interface HTMLRpPatternsElement extends Components.RpPatterns, HTMLStencilElement {
    }
    var HTMLRpPatternsElement: {
        prototype: HTMLRpPatternsElement;
        new (): HTMLRpPatternsElement;
    };
    interface HTMLRpResizableElement extends Components.RpResizable, HTMLStencilElement {
    }
    var HTMLRpResizableElement: {
        prototype: HTMLRpResizableElement;
        new (): HTMLRpResizableElement;
    };
    interface HTMLRpRootElement extends Components.RpRoot, HTMLStencilElement {
    }
    var HTMLRpRootElement: {
        prototype: HTMLRpRootElement;
        new (): HTMLRpRootElement;
    };
    interface HTMLRpScreensElement extends Components.RpScreens, HTMLStencilElement {
    }
    var HTMLRpScreensElement: {
        prototype: HTMLRpScreensElement;
        new (): HTMLRpScreensElement;
    };
    interface HTMLRpTooltipElement extends Components.RpTooltip, HTMLStencilElement {
    }
    var HTMLRpTooltipElement: {
        prototype: HTMLRpTooltipElement;
        new (): HTMLRpTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "rp-browser-frame": HTMLRpBrowserFrameElement;
        "rp-click-outside": HTMLRpClickOutsideElement;
        "rp-demo-viewer": HTMLRpDemoViewerElement;
        "rp-highlight-code": HTMLRpHighlightCodeElement;
        "rp-icon-code": HTMLRpIconCodeElement;
        "rp-icon-desktop": HTMLRpIconDesktopElement;
        "rp-icon-laptop": HTMLRpIconLaptopElement;
        "rp-icon-layout": HTMLRpIconLayoutElement;
        "rp-icon-list": HTMLRpIconListElement;
        "rp-icon-mobile": HTMLRpIconMobileElement;
        "rp-icon-next": HTMLRpIconNextElement;
        "rp-icon-previous": HTMLRpIconPreviousElement;
        "rp-icon-rotate": HTMLRpIconRotateElement;
        "rp-icon-screens": HTMLRpIconScreensElement;
        "rp-icon-tablet": HTMLRpIconTabletElement;
        "rp-index-page": HTMLRpIndexPageElement;
        "rp-pattern-page": HTMLRpPatternPageElement;
        "rp-pattern-source": HTMLRpPatternSourceElement;
        "rp-patterns": HTMLRpPatternsElement;
        "rp-resizable": HTMLRpResizableElement;
        "rp-root": HTMLRpRootElement;
        "rp-screens": HTMLRpScreensElement;
        "rp-tooltip": HTMLRpTooltipElement;
    }
}
declare namespace LocalJSX {
    interface RpBrowserFrame {
        "backUrl"?: string;
        "browserTitle"?: string;
        "currentTab"?: number;
        "forwardUrl"?: string;
        "onActivateTabEvent"?: (event: CustomEvent<number>) => void;
        "onRotateEvent"?: (event: CustomEvent<any>) => void;
        "url"?: string;
    }
    interface RpClickOutside {
        "onClickOutSide"?: (event: CustomEvent<any>) => void;
    }
    interface RpDemoViewer {
        "pattern"?: string;
    }
    interface RpHighlightCode {
        "source"?: string;
    }
    interface RpIconCode {
    }
    interface RpIconDesktop {
    }
    interface RpIconLaptop {
    }
    interface RpIconLayout {
    }
    interface RpIconList {
    }
    interface RpIconMobile {
    }
    interface RpIconNext {
    }
    interface RpIconPrevious {
    }
    interface RpIconRotate {
    }
    interface RpIconScreens {
    }
    interface RpIconTablet {
    }
    interface RpIndexPage {
    }
    interface RpPatternPage {
        "pattern"?: string;
    }
    interface RpPatternSource {
        "pattern"?: string;
    }
    interface RpPatterns {
    }
    interface RpResizable {
        "onDidResizeEvent"?: (event: CustomEvent<ResizeEvent>) => void;
        "onResizeEvent"?: (event: CustomEvent<ResizeEvent>) => void;
    }
    interface RpRoot {
    }
    interface RpScreens {
        "onChooseScreenSizeEvent"?: (event: CustomEvent<ScreenSize>) => void;
    }
    interface RpTooltip {
        "position"?: string;
        "tip"?: string;
    }
    interface IntrinsicElements {
        "rp-browser-frame": RpBrowserFrame;
        "rp-click-outside": RpClickOutside;
        "rp-demo-viewer": RpDemoViewer;
        "rp-highlight-code": RpHighlightCode;
        "rp-icon-code": RpIconCode;
        "rp-icon-desktop": RpIconDesktop;
        "rp-icon-laptop": RpIconLaptop;
        "rp-icon-layout": RpIconLayout;
        "rp-icon-list": RpIconList;
        "rp-icon-mobile": RpIconMobile;
        "rp-icon-next": RpIconNext;
        "rp-icon-previous": RpIconPrevious;
        "rp-icon-rotate": RpIconRotate;
        "rp-icon-screens": RpIconScreens;
        "rp-icon-tablet": RpIconTablet;
        "rp-index-page": RpIndexPage;
        "rp-pattern-page": RpPatternPage;
        "rp-pattern-source": RpPatternSource;
        "rp-patterns": RpPatterns;
        "rp-resizable": RpResizable;
        "rp-root": RpRoot;
        "rp-screens": RpScreens;
        "rp-tooltip": RpTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rp-browser-frame": LocalJSX.RpBrowserFrame & JSXBase.HTMLAttributes<HTMLRpBrowserFrameElement>;
            "rp-click-outside": LocalJSX.RpClickOutside & JSXBase.HTMLAttributes<HTMLRpClickOutsideElement>;
            "rp-demo-viewer": LocalJSX.RpDemoViewer & JSXBase.HTMLAttributes<HTMLRpDemoViewerElement>;
            "rp-highlight-code": LocalJSX.RpHighlightCode & JSXBase.HTMLAttributes<HTMLRpHighlightCodeElement>;
            "rp-icon-code": LocalJSX.RpIconCode & JSXBase.HTMLAttributes<HTMLRpIconCodeElement>;
            "rp-icon-desktop": LocalJSX.RpIconDesktop & JSXBase.HTMLAttributes<HTMLRpIconDesktopElement>;
            "rp-icon-laptop": LocalJSX.RpIconLaptop & JSXBase.HTMLAttributes<HTMLRpIconLaptopElement>;
            "rp-icon-layout": LocalJSX.RpIconLayout & JSXBase.HTMLAttributes<HTMLRpIconLayoutElement>;
            "rp-icon-list": LocalJSX.RpIconList & JSXBase.HTMLAttributes<HTMLRpIconListElement>;
            "rp-icon-mobile": LocalJSX.RpIconMobile & JSXBase.HTMLAttributes<HTMLRpIconMobileElement>;
            "rp-icon-next": LocalJSX.RpIconNext & JSXBase.HTMLAttributes<HTMLRpIconNextElement>;
            "rp-icon-previous": LocalJSX.RpIconPrevious & JSXBase.HTMLAttributes<HTMLRpIconPreviousElement>;
            "rp-icon-rotate": LocalJSX.RpIconRotate & JSXBase.HTMLAttributes<HTMLRpIconRotateElement>;
            "rp-icon-screens": LocalJSX.RpIconScreens & JSXBase.HTMLAttributes<HTMLRpIconScreensElement>;
            "rp-icon-tablet": LocalJSX.RpIconTablet & JSXBase.HTMLAttributes<HTMLRpIconTabletElement>;
            "rp-index-page": LocalJSX.RpIndexPage & JSXBase.HTMLAttributes<HTMLRpIndexPageElement>;
            "rp-pattern-page": LocalJSX.RpPatternPage & JSXBase.HTMLAttributes<HTMLRpPatternPageElement>;
            "rp-pattern-source": LocalJSX.RpPatternSource & JSXBase.HTMLAttributes<HTMLRpPatternSourceElement>;
            "rp-patterns": LocalJSX.RpPatterns & JSXBase.HTMLAttributes<HTMLRpPatternsElement>;
            "rp-resizable": LocalJSX.RpResizable & JSXBase.HTMLAttributes<HTMLRpResizableElement>;
            "rp-root": LocalJSX.RpRoot & JSXBase.HTMLAttributes<HTMLRpRootElement>;
            "rp-screens": LocalJSX.RpScreens & JSXBase.HTMLAttributes<HTMLRpScreensElement>;
            "rp-tooltip": LocalJSX.RpTooltip & JSXBase.HTMLAttributes<HTMLRpTooltipElement>;
        }
    }
}
